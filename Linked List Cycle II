# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        counter = 0
        memory_dict = {}
        curr = head
        index = -1
        while curr is not None:
            if id(curr) in memory_dict.keys():
                index = memory_dict[id(curr)]
                break
            else:
                memory_dict[id(curr)] = counter
                counter += 1
                curr = curr.next
        
        curr = head
        if index > 0:
            for i in range(index):
                curr = curr.next
            return curr
        elif index == 0:
            return head
        else:
            return None
