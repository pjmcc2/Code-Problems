    def canMakeWord(self, s):
        BLOCK_LIST = [("B", "O"), ("X", "K"), ("D", "Q"), ("C", "P"), ("N", 'A'), ('G', 'T'), ('R', 'E'),
                      ('T', 'G'), ('Q', 'D'), ('F', 'S'), ('J', 'W'), ('H', 'U'), ('V', 'I'), ('A', 'N'), ('O', 'B'),
                      ('E', 'R'), ('F', 'S'), ('L', 'Y'), ('P', 'C'), ('Z', 'M')]
        str = list(s.upper()) # makes input string uppercase list
        usable = []
        for b in BLOCK_LIST:
            if b[0] in str or b[1] in str:
                usable.append(b)
        seen = set()   # set of blocks ya seen already
        while usable:
            if len(str) == 0:
                return True
            cb = usable.pop(0)
            if cb not in seen:
                seen.add(cb)
            elif len(usable) + 1  >= len(str): # +1 for cb is this always true when the double letter went away?
                return True
            else:
                return False
            if cb[0] in str and cb[1] in str:
                usable.append(cb)
                continue
            elif cb[0] in str:
                str.remove(cb[0])
            elif cb[1] in str:
                str.remove(cb[1])
        return False
